[{"categories":["go"],"content":"简单的介绍一个Go语言必须的库，强大的命令行工具.","date":"2020-12-12","objectID":"/06-github-cobra/","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【2】","uri":"/06-github-cobra/"},{"categories":["go"],"content":"简单的介绍一个Go语言必须的库，强大的命令行工具. ","date":"2020-12-12","objectID":"/06-github-cobra/:0:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【2】","uri":"/06-github-cobra/"},{"categories":["go"],"content":"简介 扩展使用cobra库的，简单的命令行参数配置。 预运行和后运行的回调函数的注册使用。 ","date":"2020-12-12","objectID":"/06-github-cobra/:1:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【2】","uri":"/06-github-cobra/"},{"categories":["go"],"content":"开始 ","date":"2020-12-12","objectID":"/06-github-cobra/:2:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【2】","uri":"/06-github-cobra/"},{"categories":["go"],"content":"运行函数的介绍 在运行命令的主函数之前或之后可以运行的函数。 主要有一下几个运行函数，按从上往下先后的顺序调用： PersistentPreRun PreRun Run PostRun PersistentPostRun 之前主要使用的demo只使用到Run的函数，其实实际的cli运行当中，PreRun函数也是常被用到做一些资源的初始化。 ","date":"2020-12-12","objectID":"/06-github-cobra/:2:1","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【2】","uri":"/06-github-cobra/"},{"categories":["go"],"content":"怎么给命令行设置参数 本地标志:本地分配标志，该标志将仅适用于该特定命令。 localCmd.Flags().StringVarP(\u0026Source, \"source\", \"s\", \"\", \"Source directory to read from\") 持久标志:标志可以是\"持久\"的，这意味着此标志将可用于分配给它的命令以及该命令下的每个命令。对于全局标志，将标志作为根上的持久标志分配。 rootCmd.PersistentFlags().BoolVarP(\u0026Verbose, \"verbose\", \"v\", false, \"verbose output\") ","date":"2020-12-12","objectID":"/06-github-cobra/:2:2","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【2】","uri":"/06-github-cobra/"},{"categories":["go"],"content":"实际demo测试 以之前获取版本号为例： 测试运行参数 // versionCmd represents the version command var versionCmd = \u0026cobra.Command{ Use: \"version\", Short: \"A brief description of version\", Long: `A longer description of version long`, PreRun: func(cmd *cobra.Command, args []string) { fmt.Println(\"version PreRun\") }, Run: func(cmd *cobra.Command, args []string) { flags, _ := cmd.Flags().GetBool(\"flags\") fmt.Println(\"flags =\", flags) fmt.Println(\"version main called\") }, PostRun: func(cmd *cobra.Command, args []string) { fmt.Println(\"version PostRun\") }, } 测试flags标志位： func init() { rootCmd.AddCommand(versionCmd) versionCmd.Flags().BoolP(\"flags\", \"t\", false, \"test flags\") } 测试结果 $ go run main.go version -t version PreRun flags = true version main called version PostRun $ go run main.go version version PreRun flags = false version main called version PostRun ","date":"2020-12-12","objectID":"/06-github-cobra/:3:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【2】","uri":"/06-github-cobra/"},{"categories":["go"],"content":"总结 基本的使用扩展就到这边了，基本可以实现一个满足你的基础使用框架。 最后还有一个缺点是命令行工具不可以tab补全，官方也有实现方法使用，bash的方式。大家也可以去学习一下。后面有时间也会考虑一下出一个文档。 ","date":"2020-12-12","objectID":"/06-github-cobra/:4:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【2】","uri":"/06-github-cobra/"},{"categories":["go"],"content":"简单的介绍一个Go语言必须的库，强大的命令行工具.","date":"2020-12-12","objectID":"/05-github-cobra/","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"简单的介绍一个Go语言必须的库，强大的命令行工具. ","date":"2020-12-12","objectID":"/05-github-cobra/:0:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"简介 Cobra既是一个用于创建功能强大的现代CLI应用程序的库，也是一个生成应用程序和命令文件的程序。 Cobra被用于许多Go项目中，比如Kubernetes、Hugo和githubcli等等。 github地址: cobra ","date":"2020-12-12","objectID":"/05-github-cobra/:1:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"准备工作 ","date":"2020-12-12","objectID":"/05-github-cobra/:2:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"安装 go get -u github.com/spf13/cobra 然后在你的项目引入Cobra的包: import \"github.com/spf13/cobra\" go get后，也会给系统安一个cobra的工具，我们可以使用这个工具生成项目的demo。 ","date":"2020-12-12","objectID":"/05-github-cobra/:2:1","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"工具常用命令 $ cobra -h Cobra is a CLI library for Go that empowers applications. This application is a tool to generate the needed files to quickly create a Cobra application. Usage: cobra [command] Available Commands: add Add a command to a Cobra Application help Help about any command init Initialize a Cobra Application Flags: -a, --author string author name for copyright attribution (default \"YOUR NAME\") --config string config file (default is $HOME/.cobra.yaml) -h, --help help for cobra -l, --license string name of license for the project --viper use Viper for configuration (default true) Use \"cobra [command] --help\" for more information about a command. ","date":"2020-12-12","objectID":"/05-github-cobra/:3:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"基础实践 ","date":"2020-12-12","objectID":"/05-github-cobra/:4:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"demo工程项目生成 建议cobra空文件夹 使用go mod初始化文件 go mod init cobra 使用cobra工具生成项目文件: cobra init --pkg-name cobra --author coolliuzw 运行测试 $ go run main.go A longer description that spans multiple lines and likely contains examples and usage of using your application. For example: Cobra is a CLI library for Go that empowers applications. This application is a tool to generate the needed files to quickly create a Cobra application. 步骤执行完成后，就有一个基本可运行的命令行demo。 ","date":"2020-12-12","objectID":"/05-github-cobra/:4:1","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"demo程序修改 go run main.go，demo输出的是以上的内容，那么我们应该如何去修改他呢？跟我来： vim cmd/root.go 就能看到输出的这段代码了。cobra自动生成命令行都放置在cmd这个目录下。 // rootCmd represents the base command when called without any subcommands var rootCmd = \u0026cobra.Command{ Use: \"cobra\", Short: \"A brief description of your application\", Long: `A longer description that spans multiple lines and likely contains examples and usage of using your application. For example: Cobra is a CLI library for Go that empowers applications. This application is a tool to generate the needed files to quickly create a Cobra application.`, // Uncomment the following line if your bare application // has an action associated with it: // Run: func(cmd *cobra.Command, args []string) { }, } demo也有一些注释说明简单的用法，我们来修改一下demo在测试一下。 修改 // rootCmd represents the base command when called without any subcommands var rootCmd = \u0026cobra.Command{ Use: \"cobra\", Short: \"A brief description of coolliuzw\", Long: `A longer description of coolliuzw blog`, // Uncomment the following line if your bare application // has an action associated with it: // Run: func(cmd *cobra.Command, args []string) { }, } 运行 go run main.go A longer description of coolliuzw blog 具体修改了什么看一下代码的注释。 ","date":"2020-12-12","objectID":"/05-github-cobra/:4:2","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"添加自定义Cli命令 添加version命令行工具. cobra add version --author coolliuzw cmd目录下多了一个version.go的文件。 尝试修改version测试 // versionCmd represents the version command var versionCmd = \u0026cobra.Command{ Use: \"version\", Short: \"A brief description of version\", Long: `A longer description of version long`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(\"version called\") }, } 查看是否添加成功 go run main.go help A longer description of coolliuzw blog Usage: cobra [command] Available Commands: help Help about any command version A brief description of version Flags: --config string config file (default is $HOME/.cobra.yaml) -h, --help help for cobra -t, --toggle Help message for toggle Use \"cobra [command] --help\" for more information about a command. //go run main.go help可以看程序支持的命令行. //version A brief description of version也添加进去了 测试调用. $ go run main.go version version called // 成功调用 ","date":"2020-12-12","objectID":"/05-github-cobra/:4:3","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"总结 这边只说说demo怎么构建起来，是不是很简单。去创建你的cli工具吧 ","date":"2020-12-12","objectID":"/05-github-cobra/:5:0","tags":["go"],"title":"【Go】Cobra Go最强大的命令行工具【1】","uri":"/05-github-cobra/"},{"categories":["go"],"content":"介绍一个Go程序员不理解for...range容易出现的错误.","date":"2020-12-12","objectID":"/04-for...range/","tags":["go"],"title":"【Go】for ... range 的坑，你踩了吗？","uri":"/04-for...range/"},{"categories":["go"],"content":"介绍一个Go程序员不理解for…range容易出现的错误. ","date":"2020-12-12","objectID":"/04-for...range/:0:0","tags":["go"],"title":"【Go】for ... range 的坑，你踩了吗？","uri":"/04-for...range/"},{"categories":["go"],"content":"简述 for...range是Go编程里面非常常用到的Slice和map的遍历方式，它的伪代码你懂吗？ 常常有人被踩到循环赋值，指针引用的坑的问题。 ","date":"2020-12-12","objectID":"/04-for...range/:1:0","tags":["go"],"title":"【Go】for ... range 的坑，你踩了吗？","uri":"/04-for...range/"},{"categories":["go"],"content":"for…range遍历取值 package main import \"fmt\" type Person struct { name string } func main() { personSlice := []Person{ {\"shazi\"}, {\"coolliuzw\"}, } var res []*Person for _, person := range personSlice { res = append(res, \u0026person) } for _, person := range res { fmt.Println(\"name--\u003e\u003e:\", person.name) } } 输出结果： name--\u003e\u003e: coolliuzw name--\u003e\u003e: coolliuzw 是不是和你的预期不太一样，为什么是这样的呢？ for range 的时候，person 只初始化了一次，理解这句话应该就知道为什么了。 之后的遍历都是在原来遍历的基础上赋值，所有person的指针（地址）并没有变。该指针指向的是最后一次遍历的person的值，所以最后结果集中，也就都成了最后遍历的v的值 最后提一个问题？刚刚出现的问题怎么解决呢？ 方法一 for i := range personSlice { res = append(res, \u0026personSlice[i]) 方法二 // 哈哈，也可以考虑一下为什么这么定义person不会重复定义哦 for _, person := range personSlice { person := person res = append(res, \u0026person) } ","date":"2020-12-12","objectID":"/04-for...range/:2:0","tags":["go"],"title":"【Go】for ... range 的坑，你踩了吗？","uri":"/04-for...range/"},{"categories":["go"],"content":"总结 指针是Go、C、C++的重点支持，使用好指针对内存，GC、性能都有很大的提高。一定要理解清楚哦。 ","date":"2020-12-12","objectID":"/04-for...range/:3:0","tags":["go"],"title":"【Go】for ... range 的坑，你踩了吗？","uri":"/04-for...range/"},{"categories":["编程"],"content":"聊聊无处不在的HTTP演进史.","date":"2020-12-11","objectID":"/01-http-study/","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["编程"],"content":"聊聊无处不在的HTTP演进史. ","date":"2020-12-11","objectID":"/01-http-study/:0:0","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["编程"],"content":"简述 HTTP，日常无论是开发还是生活中的浏览网页，可以说只要有联网基本就能接触到HTTP。今天来聊聊HTTP的演进史，HTTP1.0，HTTP1.1，HTTP2.0。 超文本传输协议（HTTP）全名(hypertext transport protocol ：基本50%程序员都不知道，如果你知道你就比50%程序员优秀啦) 是用于传输诸如HTML的超媒体文档的应用层协议。 设计之初用于Web浏览器和Web服务器之间的通信，但它也可以用于其他目的。eg: 服务之间内部的请求。 HTTP是无状态协议，这也是被大量应用主要的原因，有着很多好处，不过也有一定的缺点，比如：cookie/session 解决无状态的一种方法。尽管底层的TCP/IP层是有状态的，但是分层可以说，已经把它们完全隔离开。 ","date":"2020-12-11","objectID":"/01-http-study/:1:0","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["编程"],"content":"HTTP1.0 HTTP1.0时代，诞生时间，我出身的时候，1996年，基本弃用了。 影响一个 HTTP 网络请求的因素主要有两个：带宽和延迟 带宽 延迟： 浏览器阻塞（HOL blocking） DNS 查询（DNS Lookup） 建立连接（Initial connection）：默认是使用短连接的方式. ","date":"2020-12-11","objectID":"/01-http-study/:2:0","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["编程"],"content":"HTTP1.1 HTTP1.1时代，1999年，目前还是被大量的使用，HTTP1.1也是当前使用最为广泛的HTTP协议。近几年开始慢慢的有些大企业使用HTTP2的方式接入服务了。 区别: 缓存处理 带宽优化及网络连接的使用 错误通知的管理 ：新添加了24个错误原因码 Host头处理 长连接：核心改变，默认长连接的方式。如果特殊场景需要使用短连接的方式需要带上 Connection： close头域。 扩展一个问题, HTTP1.1使用长连接的方式，是否需要或者说必要带,Connection： keep-alive? 这个我也查阅了 RFC文档，没有提到，需要带上，所以说默认没带的情况，服务端需要人为是长连接。 go语言的net包、httpclient也是默认使用长连接的方式，官方是没有携带 keep-alive头域的。 ","date":"2020-12-11","objectID":"/01-http-study/:3:0","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["编程"],"content":"HTTPS HTTP和HTTPS对比，简单的说一下。 HTTPS是基于TLS之上，加密传输。 HTTP是基于TCP之上，非加密传输。 简单的说: 抓包HTTP可以抓到。 HTTP少了加密的过程，性能估计更强。 HTTPS使用加密协议，安全性更强。 具体其他想了解可以Google看看。 ","date":"2020-12-11","objectID":"/01-http-study/:4:0","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["编程"],"content":"HTTP2 ","date":"2020-12-11","objectID":"/01-http-study/:5:0","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["编程"],"content":"http2 新特性 ​ ● 新的二进制格式（Binary Format）：HTTP1.x的解析是基于文本。HTTP2.0的协议解析决定采用二进制格式。 多路复用（MultiPlexing）:共享连接，应该是解决HTTP1.x中队头堵塞的问题。 HTTP2image \" HTTP2 ● header压缩 ● 服务端推送（server push） ","date":"2020-12-11","objectID":"/01-http-study/:5:1","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["编程"],"content":"HTTP3 目前基本没有使用，先不说。 ","date":"2020-12-11","objectID":"/01-http-study/:6:0","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["编程"],"content":"总结 最近在项目，想对HTTP1.1和HTTP2.0做性能分析，学习相关基础知识对后续分析有一定帮助，后续也会出一个 Go HTTP1.1和HTTP2.0性能分析文档。 ","date":"2020-12-11","objectID":"/01-http-study/:7:0","tags":["编程"],"title":"【http】聊聊无处不在的HTTP演进史","uri":"/01-http-study/"},{"categories":["go"],"content":"介绍Go语言使用的开发工具，以mac为例，window同.","date":"2020-12-10","objectID":"/03-dev-tools/","tags":["go"],"title":"【Go】开发和编译环境的基础安装【2】","uri":"/03-dev-tools/"},{"categories":["go"],"content":"介绍Go语言使用的开发工具，以mac为例，window同. ","date":"2020-12-10","objectID":"/03-dev-tools/:0:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【2】","uri":"/03-dev-tools/"},{"categories":["go"],"content":"简述 ​ 介绍Go的开发工具： atom + go plus vscode + go + Code Runner + Gopls Goland (收费) ","date":"2020-12-10","objectID":"/03-dev-tools/:1:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【2】","uri":"/03-dev-tools/"},{"categories":["go"],"content":"atom + go plus 未使用过，之前文章有看到有大佬用过，感觉也不错 ","date":"2020-12-10","objectID":"/03-dev-tools/:2:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【2】","uri":"/03-dev-tools/"},{"categories":["go"],"content":"vscode + go + Code Runner + Gopls 免费里面最好用的vscode + go插件 记得一定要使用 Go 官方开发的 gopls 功能，使用体验巨大提升。 go tools工具安装，安装前需要配置 GoProxy，建议使用七牛云。不配置GoProxy多半go tools是安装失败的 使用Code Runner运行代码 ","date":"2020-12-10","objectID":"/03-dev-tools/:3:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【2】","uri":"/03-dev-tools/"},{"categories":["go"],"content":"goland 安装 Go官网下载安装，收费软件也是里面功能最强的软件，比较吃电脑的性能。需要较大的内存。 学生记得去申请免费使用的License. ","date":"2020-12-10","objectID":"/03-dev-tools/:4:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【2】","uri":"/03-dev-tools/"},{"categories":["go"],"content":"总结 简单介绍可以开发的工具，具体安装使用教程参考Google或者Baidu其他一些文章，这边只是给一个开发工具初步的建议。推荐有条件的开发者使用Goland，基础的学习者，使用Vscode就足够了。 ","date":"2020-12-10","objectID":"/03-dev-tools/:5:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【2】","uri":"/03-dev-tools/"},{"categories":["go"],"content":"一个用Go编译的go语言交叉编译工具.","date":"2020-12-09","objectID":"/02-cross-compiler/","tags":["go"],"title":"【Go】window和Mac交叉编译Linux实战和源码分享","uri":"/02-cross-compiler/"},{"categories":["go"],"content":"一个用Go编译的go语言交叉编译工具. ","date":"2020-12-09","objectID":"/02-cross-compiler/:0:0","tags":["go"],"title":"【Go】window和Mac交叉编译Linux实战和源码分享","uri":"/02-cross-compiler/"},{"categories":["go"],"content":"简述 ​ 程序编译是编译型语言，运行必备的过程。Go的重要的特性之一就是有着优秀的编译速度，和之前编写C相比，有着非常明显的提升。有人开玩笑说，Go语言是作者在编译C++过程中开发。 ​ 当然编译速度快的情况下，实现交叉编译也尤其的简单，只需要做环境变量上的修改。 ","date":"2020-12-09","objectID":"/02-cross-compiler/:1:0","tags":["go"],"title":"【Go】window和Mac交叉编译Linux实战和源码分享","uri":"/02-cross-compiler/"},{"categories":["go"],"content":"需求 ​ Gopher一般开发调试环境是Window 和 Mac 环境，但是项目测试往往需要跑到linux服务器上测试。这时候就需要编译Linux的可运行程序。最基础的方式就是代码下载到Linux上编译，获得需要的运行程序。过程中就有了需要Linux下载代码的一个过程。(支持CI可以忽略) 最简单的方式，我认为是window上直接可编译Linux可运行文件，使用ssh工具的lrzsz工具，直接拖到Linux运行代码。下面简单的介绍一下我实现的工具。 ","date":"2020-12-09","objectID":"/02-cross-compiler/:2:0","tags":["go"],"title":"【Go】window和Mac交叉编译Linux实战和源码分享","uri":"/02-cross-compiler/"},{"categories":["go"],"content":"原理 参考相关文档： 在powershell命令行中编译（示例编译64位linux程序） $env:GOOS=\"linux\" $env:GOARCH=\"amd64\" go build xxx.go 在CMD命令行中编译（示例编译64位linux程序） set GOARCH=amd64 set GOOS=linux go build -a 这也是我们代码实现的原理基础。 ","date":"2020-12-09","objectID":"/02-cross-compiler/:3:0","tags":["go"],"title":"【Go】window和Mac交叉编译Linux实战和源码分享","uri":"/02-cross-compiler/"},{"categories":["go"],"content":"实现 直接修改环境变量 不可行，想编译window还得手动改回去。 bat脚本，有兴趣可以自己学习一下。 缺点，只能用于window，不能通用化。 使用麻烦，需要需要修改环境变量和解除环境变量 ","date":"2020-12-09","objectID":"/02-cross-compiler/:4:0","tags":["go"],"title":"【Go】window和Mac交叉编译Linux实战和源码分享","uri":"/02-cross-compiler/"},{"categories":["go"],"content":"Go编译的cli运行工具 既然大家是学习Go的那么就用Go实现一个可以支持交叉编译的工具 直接上代码，基于之前说的原理: package main import ( \"flag\" \"fmt\" \"os\" \"os/exec\" ) var buildPath = flag.String(\"p\", \"./\", \"input build path string\") var makeFileName = flag.String(\"o\", \"\", \"output file name config\") func main() { flag.Parse() _ = os.Setenv(\"CGO_ENABLED\", \"0\") _ = os.Setenv(\"GOARCH\", \"amd64\") _ = os.Setenv(\"GOOS\", \"linux\") arg := []string{\"build\"} if len(*makeFileName) \u003e 0 { arg = append(arg, []string{\"-o\", *makeFileName}...) } arg = append(arg, *buildPath) if err := exec.Command(\"go\", arg...).Run(); err != nil { fmt.Println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!make Failed!!!!!!!!!!!!!!!!!!!!!!!!!!\", err) } else { fmt.Println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!make SUCCESS!!!!!!!!!!!!!!!!!!!!!!!!!!\") } } 代码就是基于原理开发的。在所在的平台执行命令，以mac为例。 编译工具（一次编译永久使用） go build -o gomake 试用工具交叉编译 gomoke -o linux_go # liuzhiwei @ liuzhiweideMacBook-Pro in ~/code/go/mgo/test [23:45:33] C:127 $ ls go.mod gomake main.go # liuzhiwei @ liuzhiweideMacBook-Pro in ~/code/go/mgo/test [23:45:35] $ ./gomake -o linux_go !!!!!!!!!!!!!!!!!!!!!!!!!!make SUCCESS!!!!!!!!!!!!!!!!!!!!!!!!!! # liuzhiwei @ liuzhiweideMacBook-Pro in ~/code/go/mgo/test [23:46:06] $ ls go.mod gomake linux_go main.go 使用以上过程实现的编译linux运行程序，这边是用Mac测试，window同原理。 常用方式：gomake编译工具移动到需要编译的目录运行 ./gomake即可。 ","date":"2020-12-09","objectID":"/02-cross-compiler/:4:1","tags":["go"],"title":"【Go】window和Mac交叉编译Linux实战和源码分享","uri":"/02-cross-compiler/"},{"categories":["go"],"content":"总结 ​ 主要介绍Go编写的Go语言交叉编译工具，实现Window和Mac编译Linux可运行程序。可以试用起来，这个有打打的提高了我的工作效率。 ","date":"2020-12-09","objectID":"/02-cross-compiler/:5:0","tags":["go"],"title":"【Go】window和Mac交叉编译Linux实战和源码分享","uri":"/02-cross-compiler/"},{"categories":["go"],"content":"一个介绍go语言相关开发环境安装软件.","date":"2020-12-08","objectID":"/01-env-install/","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["go"],"content":"go语言编译环境安装的简单介绍. ","date":"2020-12-08","objectID":"/01-env-install/:0:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["go"],"content":"简述 学习一门新的语言，安装一个可以运行调试的环境尤为重要。 Go语言是可跨平台的语言，支持常见的开发环境 Linux Mac OS X Windows ","date":"2020-12-08","objectID":"/01-env-install/:1:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["go"],"content":"开始 ","date":"2020-12-08","objectID":"/01-env-install/:2:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["go"],"content":"Go语言官网 https://golang.org，一般的情况是无法打开使用的，但是go官方有一个中文镜像的官网 https://golang.google.cn，大家可以使用这个网址下载。 安装包下载建议，一般使用官方最新的release版本即可。 点击download进行选着相应的系统版本安装。 ","date":"2020-12-08","objectID":"/01-env-install/:2:1","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["go"],"content":"Linux If you have a previous version of Go installed, be sure to remove it before installing another. Download the archive and extract it into /usr/local, creating a Go tree in /usr/local/go. For example, run the following as root or through sudo: tar -C /usr/local -xzf go1.14.3.linux-amd64.tar.gz Add /usr/local/go/bin to the PATH environment variable. You can do this by adding the following line to your $HOME/.profile or /etc/profile (for a system-wide installation): export PATH=$PATH:/usr/local/go/bin Note: Changes made to a profile file may not apply until the next time you log into your computer. To apply the changes immediately, just run the shell commands directly or execute them from the profile using a command such as source $HOME/.profile. Verify that you’ve installed Go by opening a command prompt and typing the following command: $ go version Confirm that the command prints the installed version of Go. ","date":"2020-12-08","objectID":"/01-env-install/:3:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["go"],"content":"基础安装实战 建议使用wget下载到linux的临时目录中. eg: wget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz tar -C /usr/local -xzf {name} Eg: tar -C /usr/local -xzf go1.14.4.linux-amd64.tar.gz 修改环境变量 vi /etc/profile 打开 /etc/profile，尾行添加: - PATH=$PATH:/usr/local/go/bin 保存退出 source /etc/profile 查看版本号，验证是否生效。 - go version ","date":"2020-12-08","objectID":"/01-env-install/:3:1","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["go"],"content":"Window Open the MSI file you downloaded and follow the prompts to install Go. By default, the installer will install Go to C:\\Go. You can change the location as needed. After installing, you will need to close and reopen any open command prompts so that changes to the environment made by the installer are reflected at the command prompt. Verify that you’ve installed Go. In Windows, click the Start menu. In the menu’s search box, type cmd, then press the Enter key. In the Command Prompt window that appears, type the following command: $ go version Confirm that the command prints the installed version of Go. ","date":"2020-12-08","objectID":"/01-env-install/:4:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["go"],"content":"Mac Open the package file you downloaded and follow the prompts to install Go. The package installs the Go distribution to /usr/local/go. The package should put the /usr/local/go/bin directory in your PATH environment variable. You may need to restart any open Terminal sessions for the change to take effect. Verify that you’ve installed Go by opening a command prompt and typing the following command: $ go version Confirm that the command prints the installed version of Go. ","date":"2020-12-08","objectID":"/01-env-install/:5:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["go"],"content":"总结 ​ 主要介绍，Go包的安装，下一篇介绍各个平台使用的开发工具。 ","date":"2020-12-08","objectID":"/01-env-install/:6:0","tags":["go"],"title":"【Go】开发和编译环境的基础安装【1】","uri":"/01-env-install/"},{"categories":["c语言"],"content":"一个简单的，跨平台c环境变量获取库.","date":"2020-12-08","objectID":"/01-get-env/","tags":["c语言"],"title":"【c】跨平台c系统环境变量获取库","uri":"/01-get-env/"},{"categories":["c语言"],"content":"一个简单的，跨平台c环境变量获取库. ","date":"2020-12-08","objectID":"/01-get-env/:0:0","tags":["c语言"],"title":"【c】跨平台c系统环境变量获取库","uri":"/01-get-env/"},{"categories":["c语言"],"content":"简述 c语言获取环境的变量的方式，window和linux都是相同的方式，通常使用getenv接口进行获取环境变量，但是往往我们获取环境变量的时候，常需要做一定的判断: 环境变量未获取到，提示错误（assert），终止程序运行。 环境变量未获取到，使用自定义默认值，初始化环境变量。 bool类型环境变量设置为 yes，true，y，t 等等，能直接转换为bool类型 ","date":"2020-12-08","objectID":"/01-get-env/:1:0","tags":["c语言"],"title":"【c】跨平台c系统环境变量获取库","uri":"/01-get-env/"},{"categories":["c语言"],"content":"源代码 #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e#include \u003cassert.h\u003e#include \u003cstring.h\u003e typedef enum { ENV_FALSE = 0, ENV_TRUE = 1 } env_bool_t; #ifdef _WIN32 #define strcasecmp(s1, s2) stricmp(s1, s2) #endif static env_bool_t zstr(const char *s) { return (s == NULL || s[0] == '\\0') ? ENV_TRUE : ENV_FALSE; } static const char* env_get_string_imp(const char* key, const char* default_value, env_bool_t must_get) { char* val = getenv(key); if (!zstr(val)) { return val; } if (must_get) { printf(\"env key \\\"%s\\\"does not find!\\n\", key); assert(NULL); } else { return default_value; } } static const int env_get_int_imp(const char* key, const int default_value, env_bool_t must_get) { const char* val = getenv(key); if (!zstr(val)) { return atoi(val); } if (must_get) { printf(\"env key \\\"%s\\\"does not find!\\n\", key); assert(NULL); } else { return default_value; } } static env_bool_t env_true(const char *s) { if (zstr(s)) { return ENV_FALSE; } if (!strcasecmp(s, \"yes\") || !strcasecmp(s, \"true\") || !strcasecmp(s, \"y\") || !strcasecmp(s, \"t\") || !strcasecmp(s, \"1\") || !strcasecmp(s, \"enabled\") || !strcasecmp(s, \"active\") || !strcasecmp(s, \"allow\") || !strcasecmp(s, \"on\")) { return ENV_TRUE; } return ENV_FALSE; } static const env_bool_t env_get_bool_imp(const char* key, const env_bool_t default_value, env_bool_t must_get) { const char* val = getenv(key); if (!zstr(val)) { return env_true(val); } if (must_get) { printf(\"env key \\\"%s\\\"does not find!\\n\", key); assert(NULL); } else { return default_value; } } const char* env_get_string(const char* key, const char* default_value) { return env_get_string_imp(key, default_value, ENV_FALSE); } const int env_get_int(const char* key, const int default_value) { return env_get_int_imp(key, default_value, ENV_FALSE); } const env_bool_t env_get_bool(const char* key, const env_bool_t default_value) { return env_get_bool_imp(key, default_value, ENV_FALSE); } const char* env_mustget_string(const char* key) { return env_get_string_imp(key, NULL, ENV_TRUE); } const int env_mustget_int(const char* key) { return env_get_int_imp(key, 0, ENV_TRUE); } const env_bool_t env_mustget_bool(const char* key) { return env_get_bool_imp(key, ENV_FALSE, ENV_TRUE); } ","date":"2020-12-08","objectID":"/01-get-env/:2:0","tags":["c语言"],"title":"【c】跨平台c系统环境变量获取库","uri":"/01-get-env/"},{"categories":["c语言"],"content":"关键接口说明 ","date":"2020-12-08","objectID":"/01-get-env/:3:0","tags":["c语言"],"title":"【c】跨平台c系统环境变量获取库","uri":"/01-get-env/"},{"categories":["c语言"],"content":"自定义默认值获取接口 const char* env_get_string(const char* key, const char* default_value) ","date":"2020-12-08","objectID":"/01-get-env/:3:1","tags":["c语言"],"title":"【c】跨平台c系统环境变量获取库","uri":"/01-get-env/"},{"categories":["c语言"],"content":"获取失败assert接口 const char* env_mustget_string(const char* key) ","date":"2020-12-08","objectID":"/01-get-env/:3:2","tags":["c语言"],"title":"【c】跨平台c系统环境变量获取库","uri":"/01-get-env/"},{"categories":["c语言"],"content":"获取bool类型接口 const env_bool_t env_mustget_bool(const char* key) ","date":"2020-12-08","objectID":"/01-get-env/:3:3","tags":["c语言"],"title":"【c】跨平台c系统环境变量获取库","uri":"/01-get-env/"},{"categories":["c语言"],"content":"Github地址 https://github.com/CoolLiuzw/c-env ","date":"2020-12-08","objectID":"/01-get-env/:4:0","tags":["c语言"],"title":"【c】跨平台c系统环境变量获取库","uri":"/01-get-env/"},{"categories":["tools"],"content":"github相关的命令.","date":"2020-12-06","objectID":"/01-github-search/","tags":["tools"],"title":"【tools】 如何玩转GitHub？","uri":"/01-github-search/"},{"categories":["tools"],"content":"github常用的搜索方式. ","date":"2020-12-06","objectID":"/01-github-search/:0:0","tags":["tools"],"title":"【tools】 如何玩转GitHub？","uri":"/01-github-search/"},{"categories":["tools"],"content":"1. 最常用的Git命令 克隆代码 git clone http地址 git地址 拉取代吗 git pull 切换分支 git checkout \u003cbranch_name\u003e 查看工作区状态 git status 查看过往提交记录 git log 提交到暂存区 git add 提交到本地仓库 git commit -m \"提交注释\" 提交到远程仓库 git pull ","date":"2020-12-06","objectID":"/01-github-search/:1:0","tags":["tools"],"title":"【tools】 如何玩转GitHub？","uri":"/01-github-search/"},{"categories":["tools"],"content":"2. GitHub介绍和搜索项目 按项目名称（name）查找 in:name dev-tester 按项目描述（description）查找 in:description 微服务 in:about 微服务 按README描述查找 in:readme 微服务相关 设置星星数（stars）查询范围 stars:\u003e1000 设置fork数（forks）查询范围 forks:\u003e500 按项目语言筛选 language:java 按项目作者查找 user:CoolLiuzw 按项目大小查找 size:\u003e=500 更新时间 pushed:\u003e2020-01-01 组合查找 in:name dev-tester in:description 微服务 stars:\u003e1000 ","date":"2020-12-06","objectID":"/01-github-search/:2:0","tags":["tools"],"title":"【tools】 如何玩转GitHub？","uri":"/01-github-search/"},{"categories":["tools"],"content":"常用查找示例: in:about gin language:go ","date":"2020-12-06","objectID":"/01-github-search/:2:1","tags":["tools"],"title":"【tools】 如何玩转GitHub？","uri":"/01-github-search/"},{"categories":["tools"],"content":"3. Github下载加速 绑定hosts linux/window尝试通过绑定hosts的方式获取一定的加速，不过本地测试加速的效果不明显，还是建议大家借助Gitee的方式，实现快速的下载代码。 借助Gitee下载代码 Gitee对于github上比较出名的项目也有一定的维护，基本上能做到每天同步更新一次的频率，可以查找一下对应的项目。 使用油猴插件gitfast ","date":"2020-12-06","objectID":"/01-github-search/:3:0","tags":["tools"],"title":"【tools】 如何玩转GitHub？","uri":"/01-github-search/"},{"categories":["tools"],"content":"4. GitHub项目创建及上传 待补充 ","date":"2020-12-06","objectID":"/01-github-search/:4:0","tags":["tools"],"title":"【tools】 如何玩转GitHub？","uri":"/01-github-search/"},{"categories":["tools"],"content":"总结 其实，如何玩转github的相关知识很多开发的小伙伴还是没有认真的学习过，建议通过本文的学习，你能通过github上找到自己想要的开源项目。 ","date":"2020-12-06","objectID":"/01-github-search/:5:0","tags":["tools"],"title":"【tools】 如何玩转GitHub？","uri":"/01-github-search/"},{"categories":["blog"],"content":"测试新的blog主题.","date":"2020-12-06","objectID":"/02-test-blog/","tags":["blog"],"title":"【blog】关于本博客","uri":"/02-test-blog/"},{"categories":["blog"],"content":"测试新的blog主题，测试搜索。 ","date":"2020-12-06","objectID":"/02-test-blog/:0:0","tags":["blog"],"title":"【blog】关于本博客","uri":"/02-test-blog/"},{"categories":["blog"],"content":"关于本博客 测试local图片，test测试local图片 \" 测试local图片，test ","date":"2020-12-06","objectID":"/02-test-blog/:1:0","tags":["blog"],"title":"【blog】关于本博客","uri":"/02-test-blog/"}]